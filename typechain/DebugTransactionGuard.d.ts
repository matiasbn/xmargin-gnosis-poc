/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DebugTransactionGuardInterface extends ethers.utils.Interface {
  functions: {
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "txNonces(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "txNonces", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txNonces", data: BytesLike): Result;

  events: {
    "GasUsage(address,bytes32,uint256,bool)": EventFragment;
    "TransactionDetails(address,bytes32,address,uint256,bytes,uint8,uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GasUsage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionDetails"): EventFragment;
}

export type GasUsageEvent = TypedEvent<
  [string, string, BigNumber, boolean] & {
    safe: string;
    txHash: string;
    nonce: BigNumber;
    success: boolean;
  }
>;

export type TransactionDetailsEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    string,
    number,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    safe: string;
    txHash: string;
    to: string;
    value: BigNumber;
    data: string;
    operation: number;
    safeTxGas: BigNumber;
    usesRefund: boolean;
    nonce: BigNumber;
  }
>;

export class DebugTransactionGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DebugTransactionGuardInterface;

  functions: {
    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      arg9: BytesLike,
      arg10: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    txNonces(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  checkAfterExecution(
    txHash: BytesLike,
    success: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    arg9: BytesLike,
    arg10: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  txNonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      arg9: BytesLike,
      arg10: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    txNonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "GasUsage(address,bytes32,uint256,bool)"(
      safe?: string | null,
      txHash?: BytesLike | null,
      nonce?: BigNumberish | null,
      success?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      { safe: string; txHash: string; nonce: BigNumber; success: boolean }
    >;

    GasUsage(
      safe?: string | null,
      txHash?: BytesLike | null,
      nonce?: BigNumberish | null,
      success?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      { safe: string; txHash: string; nonce: BigNumber; success: boolean }
    >;

    "TransactionDetails(address,bytes32,address,uint256,bytes,uint8,uint256,bool,uint256)"(
      safe?: string | null,
      txHash?: BytesLike | null,
      to?: null,
      value?: null,
      data?: null,
      operation?: null,
      safeTxGas?: null,
      usesRefund?: null,
      nonce?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        number,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        safe: string;
        txHash: string;
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        safeTxGas: BigNumber;
        usesRefund: boolean;
        nonce: BigNumber;
      }
    >;

    TransactionDetails(
      safe?: string | null,
      txHash?: BytesLike | null,
      to?: null,
      value?: null,
      data?: null,
      operation?: null,
      safeTxGas?: null,
      usesRefund?: null,
      nonce?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        number,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        safe: string;
        txHash: string;
        to: string;
        value: BigNumber;
        data: string;
        operation: number;
        safeTxGas: BigNumber;
        usesRefund: boolean;
        nonce: BigNumber;
      }
    >;
  };

  estimateGas: {
    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      arg9: BytesLike,
      arg10: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    txNonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      arg9: BytesLike,
      arg10: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    txNonces(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
